
const {expressWarped, expressErrorWarped, LogSingleton, ACTION_TYPE} = require("./index");
const request = require("request");
const axios = require("axios");
var sync_request = require('sync-request');
const config = require('./config.json');

const express = require('express')
const app = express()
const port = 3000

const test2 = require('./test2');

LogSingleton.setup(config);

LogSingleton.setLogLevel(LogSingleton.LogLevel.ALL)

let y = (res) => {
    log = LogSingleton.getLog(res, {"a":5,'b':"2", 'c': 3});
    log.debug("debug0", {"c":"c"});
    log.info("info0");
    log.error("error0");
    log = LogSingleton.getLog(res, {"a":3, 'd':5});
    log.debug("debug1",{"d":2, c:'a'});
    log.info("info1");
    log.error("error1");

    const extra_fraud = {
    FLOW_ID:"flow_id",
    USER_ROLE:"user role",
    USER_TYPE:"user type",
    PROCESS_STATUS:"process_status",
    COMPONENT_CODE:"component_code",
    SUB_COMPONENT_CODE:"sub_component_code",
    REMARK:"for testing",
    RESERV01:"resv 1",
    RESERV02:"resv 2",
    RESERV03:"resv 3",
    RESERV04:"resv 4",
    WORKFLOW_ID:"workflow_id",
    PORTAL_ID:"portal id",
    SERVICE_ID:"service_id",
    SERVICE_NAME:"service type",
    ACTION_TYPE:"APPROVE",
    OBJECT_NAME:"object name",
    APP_LOG_EVENT_ID:"app log event id",
    ENGINE_CODE:"66",
    IP_ADDRESS:"ip_address",
    std_out:true
    }

    log.biz("bbbb", extra_fraud);

    //let actor = "eyJraWQiOiJmalNncHFYTGN6VTBqcTZ6VjZpeDQ5YWpqMVpDaWFSS0RRSTlUUU8yRUNJIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwMHVkNGI1czB6RmV1MGsyUjF0NyIsIm5hbWUiOiJzaXJhcHJhcGEgVS1QaXRhayIsInZlciI6MSwiaXNzIjoiaHR0cHM6Ly9hbHBoYS10aXNjby5va3RhLmNvbS9vYXV0aDIvZGVmYXVsdCIsImF1ZCI6IjBvYWY4cHphb2NXalZhaTM2MXQ3IiwiaWF0IjoxNjI4ODM0NDg3LCJleHAiOjE2Mjg4MzgwODcsImp0aSI6IklELkx0LU1wMnRkc2hCTVJSSXh2UGk4NTJpVFhlNlBsWUZRVFZkZWNXZloxRnMiLCJhbXIiOlsicHdkIl0sImlkcCI6IjAwbzE5a3d1NnlHVWVqNFVuMXQ3Iiwibm9uY2UiOiIxMDAwMDQ3IiwicHJlZmVycmVkX3VzZXJuYW1lIjoienNpcmFwcmFwYUB0aXNjby5jby50aCIsImF1dGhfdGltZSI6MTYyODgzNDQ3NCwiYXRfaGFzaCI6Ijg5MDdtWkZXbW1peHp1SUdWd3NBbWciLCJ1c2VyX2lkIjoiYzViNDgyMDctNDc5ZS00MWM0LWI5YzItNzI2NTUxZGRhNGZkIiwiY2xvdWRmbGFyZV9ncm91cCI6WyIxMy02Il0sImVtcGxveWVlX2RldGFpbCI6eyJlbXBsb3llZV9pZCI6IkVtcF8wMSIsImN1c3RvbWVyX2luZm9ybWF0aW9uIjoiQXV0b18xNyIsImVtcGxveWVlX2NvZGUiOiIxMDQ3IiwiZW1wbG95ZWVfdHlwZSI6MSwiZW1wbG95ZWVfdHlwZV9pbl90aGFpIjoi4Lie4LiZ4Lix4LiB4LiH4Liy4LiZ4Lib4Lij4Liw4LiI4LizIiwiZW1wbG95ZWVfdHlwZV9pbl9lbmdsaXNoIjoiUGVybWFuZW50IiwiZW1wbG95bWVudF9zdGF0dXMiOjIsImVtcGxveW1lbnRfc3RhdHVzX2luX3RoYWkiOiLguJ7guJnguLHguIHguIfguLLguJkiLCJlbXBsb3ltZW50X3N0YXR1c19pbl9lbmdsaXNoIjoiRW1wbG95ZWUiLCJmaXJzdF9uYW1lIjoiRW1wMDEiLCJsYXN0X25hbWUiOiJMYXN0bmFtZTAxIiwiZGF0YV9wcm9jZXNzb3IiOiJBdXRvXzE0IiwiZGF0YV9jb250cm9sbGVyIjoiQXV0b18xNCIsInJlZ2lzdGVyX3NlcnZpY2VfaWQiOiJSZWdpc3QwMSIsImNvbXBhbnlfaW5mb3JtYXRpb24iOiJBdXRvXzE0IiwiY29tcGFueV9uYW1lIjoi4Lia4LilIOC4l-C4tOC4quC5guC4geC5iSDguIjguLPguIHguLHguJQiLCJqb2JfYXNzaWdubWVudCI6W3siam9iX2Fzc2lnbm1lbnRfaWQiOiJCMDdDRDE4Qy1CMTY2LTQ5RjktOUM4OC0yQ0ZBREI0M0VEQzMiLCJwcmltYXJ5X2pvYl90aXRsZSI6dHJ1ZSwiam9iX3RpdGxlX2lkIjoiOTFCOEQ4NDMtQUFFNy00ODAwLUFGN0UtQTY1NTA0OThEMkUyIiwiam9iX3RpdGxlX2luX2VuZ2xpc2giOiJBZG1pbiBTdGFmZiIsImpvYl90aXRsZV9pbl90aGFpIjoiQWRtaW4gU3RhZmYifV0sImJyYW5jaCI6W10sImVudGVycHJpc2Vfcm9sZV9pZCI6IkVKLTE4IiwiZW50ZXJwcmlzZV9yb2xlX25hbWUiOiJUZXN0IFRlc3QgZWllaSIsInRlbGVwaG9uZV9jb250YWN0IjpbXSwicmVnaXN0cmF0aW9uX3NlcnZpY2VfaWQiOiJSZWdpc3QwMSIsImNvbXBhbnlfY29kZSI6IjQwIiwiY29tcGFueV9zaG9ydF9uYW1lIjoiVElTQ09BU1NFVCJ9LCJlcm1fcm9sZSI6ImMxNzBhMDAxLWIzMWMtNGU5My1hMDBlLTUxZTllODJmZjYzMCIsIjEyNF9ncm91cF9uYW1lIjpbIjEyNC0xIl0sInJlZ2lzX3NlcnZpY2VfaWQiOiJSZWdpc3QwMSIsInN1Yl9zdGF0ZV80Ijoic3RhdGU0Iiwic3RhdHVzIjoiYzViNDgyMDctNDc5ZS00MWM0LWI5YzItNzI2NTUxZGRhNGZkIiwidGVzdF9pZCI6IjAwdWQ0YjVzMHpGZXUwazJSMXQ3In0.NL5fZR4eh8F5wr-OIZR_JmCdYXyAgQv2vtdNNRCPM_96BrEn634NVkZu26VeU-0-0_DjZxxCNv-jz2x88Ta-TdVfal00tKQ4xGuGpsF7XxRiptnobsvqeo_b8Skgpxp99O-FxOn1Bh-WDiBerElGErxnq74BiVwbuxZDa27YXhT-bjjPDI7M0ZtfG2jbEmR6p8yzEpyA2qfAvukcYWMqYJudOuDu_fVWZlsFRT_HefEL5DNbsN4vksETvulYKYs2AxyGd2p-z4mY_2mrIcubBDOMuNKx7uG6tJJoUwt9pTyv5wu09nc9OMo3VRiC3J5QXVXye2GVe5X6hkdv5mkIhw"
    let actor = "eyJraWQiOiJTU3NieVE5dWluc3Q0bW1PUjVnX1FJMzViZ0tYdHQ1VmhEX0pYR1BSQjkwIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiIwMHVna3BjNWVyS1ZvZkpQUjF0NyIsIm5hbWUiOiJOYXR0aGFwb3JuIFNvbWhpcnVuIiwidmVyIjoxLCJpc3MiOiJodHRwczovL2FscGhhLXRpc2NvLm9rdGEuY29tL29hdXRoMi9kZWZhdWx0IiwiYXVkIjoiMG9hZncxYjhja0tyUmJKVmkxdDciLCJpYXQiOjE2MzM0MTEwMDEsImV4cCI6MTYzMzQxNDYwMSwianRpIjoiSUQudXlCTlhFQWpvb2JhZkNsUE9kREcyeDVydG41bmtEbFJ4Y1F2eXRRcmtKSSIsImFtciI6WyJwd2QiXSwiaWRwIjoiMDBvMTlrd3U2eUdVZWo0VW4xdDciLCJub25jZSI6IjEwMDAwMDAiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJ6bmF0dGhhcG9yQHRpc2NvLmNvLnRoIiwiYXV0aF90aW1lIjoxNjMzNDEwNzEwLCJhdF9oYXNoIjoialhLUlBOYmhLUGxVeDVZWWtadXZCdyIsInVzZXJfaWQiOiI5YzZkYTYyZS1jM2Q1LTQ5ZWItOGJiMS01YWIyMjdkZjJjODEiLCJjbG91ZGZsYXJlX2dyb3VwIjpbIjEzLTkiLCIxMy03IiwiMTMtNiJdLCJlbXBsb3llZV9kZXRhaWwiOnsiZW1wbG95ZWVfaWQiOiJFbXBfMDEiLCJjdXN0b21lcl9pbmZvcm1hdGlvbiI6IkF1dG9fMTciLCJlbXBsb3llZV9jb2RlIjoiMTA0NyIsImVtcGxveWVlX3R5cGUiOjEsImVtcGxveWVlX3R5cGVfaW5fdGhhaSI6IuC4nuC4meC4seC4geC4h-C4suC4meC4m-C4o-C4sOC4iOC4syIsImVtcGxveWVlX3R5cGVfaW5fZW5nbGlzaCI6IlBlcm1hbmVudCIsImVtcGxveW1lbnRfc3RhdHVzIjoyLCJlbXBsb3ltZW50X3N0YXR1c19pbl90aGFpIjoi4Lie4LiZ4Lix4LiB4LiH4Liy4LiZIiwiZW1wbG95bWVudF9zdGF0dXNfaW5fZW5nbGlzaCI6IkVtcGxveWVlIiwiZmlyc3RfbmFtZSI6IkVtcDAxIiwibGFzdF9uYW1lIjoiTGFzdG5hbWUwMSIsImRhdGFfcHJvY2Vzc29yIjoiQXV0b18xNCIsImRhdGFfY29udHJvbGxlciI6IkF1dG9fMTQiLCJyZWdpc3Rlcl9zZXJ2aWNlX2lkIjoiUmVnaXN0MDEiLCJjb21wYW55X2luZm9ybWF0aW9uIjoiQXV0b18xNCIsImNvbXBhbnlfbmFtZSI6IuC4muC4pSDguJfguLTguKrguYLguIHguYkg4LiI4Liz4LiB4Lix4LiUIiwiam9iX2Fzc2lnbm1lbnQiOlt7ImpvYl9hc3NpZ25tZW50X2lkIjoiQjA3Q0QxOEMtQjE2Ni00OUY5LTlDODgtMkNGQURCNDNFREMzIiwicHJpbWFyeV9qb2JfdGl0bGUiOnRydWUsImpvYl90aXRsZV9pZCI6IjkxQjhEODQzLUFBRTctNDgwMC1BRjdFLUE2NTUwNDk4RDJFMiIsImpvYl90aXRsZV9pbl9lbmdsaXNoIjoiQWRtaW4gU3RhZmYiLCJqb2JfdGl0bGVfaW5fdGhhaSI6IkFkbWluIFN0YWZmIn1dLCJicmFuY2giOlt7ImVtcGxveWVlX2JyYW5jaF9pZCI6IkVtcC1CcmFuY2gtMiIsInByaW1hcnlfYnJhbmNoIjp0cnVlLCJicmFuY2hfaW5mb3JtYXRpb24iOiJUSVNDT19Bc3NldF9CcmFuY2hfMDIiLCJicmFuY2hfY29kZSI6IlRJU0NPIEFzc2V0LTAwMiIsImJyYW5jaF9uYW1lX3RoIjoi4Lig4Liy4LiE4Li04LiZIn1dLCJlbnRlcnByaXNlX3JvbGVfaWQiOiJFSi0xOCIsImVudGVycHJpc2Vfcm9sZV9uYW1lIjoiVGVzdCBUZXN0IGVpZWkiLCJ0ZWxlcGhvbmVfY29udGFjdCI6W10sInJlZ2lzdHJhdGlvbl9zZXJ2aWNlX2lkIjoiUmVnaXN0MDEiLCJ1c2VybmFtZSI6ImNoYW50YW5hIiwiY29tcGFueV9jb2RlIjoiNDAiLCJjb21wYW55X3Nob3J0X25hbWUiOiJUSVNDT0FTU0VUIn0sImVybV9yb2xlIjoiYTUyZjI5YTctYjg5NC00OWJlLWFiNDAtZmJlYzFlMjZlYTlmIiwiaWRwX2VudiI6ImVtcGxveWVlIiwicmVnaXNfc2VydmljZV9pZCI6IlJlZ2lzdDAxIiwic3ViX3N0YXRlXzQiOiJzdGF0ZTQiLCIxOF9ncm91cF9uYW1lIjpbIjE4LTEiXSwic3RhdHVzIjoiOWM2ZGE2MmUtYzNkNS00OWViLThiYjEtNWFiMjI3ZGYyYzgxIiwidGVzdF9pZCI6IjAwdWdrcGM1ZXJLVm9mSlBSMXQ3In0.w5iQLw0Usy5c4OTcu889Jl7VDw0SChlB417jk1tsnRgPNe-_LYtABf3EkPWBUuRII5KBpwjA89qcg0RCCaTR6mvj0tisCT9SPOt9kh0a6-mjFOnVtqeRmew96mpqbpSnKTq6e3Njlxz_NwXOHQS7KFOzZVFFZX5QV0M2ueEBDNQ1s0qv5KpNsX9k637VCj1aY_-UCe6RxILw8aab85l9ZSan1GwcYPNu97KLHFaPBQ0i121hWxtwSwp08KWm3afVnMQWAKgxRcXz5fUfJAMwtHE2eZXs62kt4CduORIbgGGXizfb-GLqDbrHP2L6UsfO1JkALkAip8tIGJce6SvAfg"
    let event = {
        'serverity': 'debug',
        'action': 'test',
        'eventStatus': 'SUCCESS'
    }
    let target = {
        'targetID': 'testxxx',
        'user': 'testuser',
        'detail': 'SUCCESS'
    }
    //user activity
    log.user_activity({Actor:actor, Event:event, Target:target, std_out:true})
    log.user_activity({Actor:{id:"123", name:"user_activity", detail:{info:'xxx'}}, Event:event, Target:target, std_out:true})
    log.user_activity({Actor:{id:"123", name:"user_activity", detail:"xxx"}, Event:event, Target:target, std_out:true})
    log.user_activity({Actor:{id:"123", name:"user_activity", detail:""}, Event:event, Target:target, std_out:true})
    log.user_activity({Actor:{id:"123", name:"user_activity"}, Event:event, Target:target, std_out:true})
    log.user_activity({Event:event, Target:target, std_out:true})

    //user management
    log.user_management({Actor:actor, Event:event, Target:target, std_out:true})
    log.user_management({Actor:{id:"123", name:"user_management", detail:{info:'xxx'}}, Event:event, Target:target, std_out:true})
    log.user_management({Actor:{id:"123", name:"user_management", detail:"xxx"}, Event:event, Target:target, std_out:true})
    log.user_management({Actor:{id:"123", name:"user_management", detail:""}, Event:event, Target:target, std_out:true})
    log.user_management({Actor:{id:"123", name:"user_management"}, Event:event, Target:target, std_out:true})
    log.user_management({Event:event, Target:target, std_out:true})

    //user authentication
    log.user_authentication({Actor:actor, Event:event, Target:target, std_out:true})
    log.user_authentication({Actor:{id:"123", name:"user_authentication", detail:{info:'xxx'}}, Event:event, Target:target, std_out:true})
    log.user_authentication({Actor:{id:"123", name:"user_authentication", detail:"xxx"}, Event:event, Target:target, std_out:true})
    log.user_authentication({Actor:{id:"123", name:"user_authentication", detail:""}, Event:event, Target:target, std_out:true})
    log.user_authentication({Actor:{id:"123", name:"user_authentication"}, Event:event, Target:target, std_out:true})
    log.user_authentication({Event:event, Target:target, std_out:true})

}


app.use(expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res)
    if(log)
    {
        log.debug("befor route 1",{'c':3});
        //log.activity(ACTION_TYPE.AUTHENTICATION.LOGIN, "surawej", "test activity", {'std_out':true});
        log.error("ssss", {a:4})
        try{
            xxx.t()
        }
        catch(e){
            console.error(e);
            log.exception("test", e);
            log.error("error")
            log.debug("debug");
            log.debug({a:1,b:"2"});
            log.debug([{a:1,b:"2"}]);
            log.debug(3);
        }
        xxx(log);
        y(res);
        test2();
    }
    next()
}));


let promise = new Promise(function(resolve, reject) {
        resolve(123);
        reject(456);
  });

app.get('/',(req, res, next) => {
    let log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /");

    log.activity(ACTION_TYPE.APPLICATION_ACTIVITY.CREATE,"USER", "", {data:{a:1,b:2}, a:3});

        //let headers = log.get_log_header;

        //var xxx = sync_request('GET', 'http://localhost:5000/test2', {headers:headers});
        //#console.log(xxx.getBody())
    }
    let data = {meta:{"response_code":20000}};
    /*return axios.get('http://localhost:5000/test2222',{headers:log.get_log_header}).then(
        (r)=>{
            res.send(data);
            return data;
        }).catch((e)=>{
            next(e);
        } );
    */
    //log.set_result();
    x.log()
    xxx(log);
    res.send(data);
    //next(new Error("sss"));
    log.send(data, res);
});

function xxx()
{
    let log = LogSingleton.getLog()
    log.debug("XXXXXX")
}

app.get('/download', expressWarped((req, res, next)=>{
    res.setHeader('Content-disposition', 'attachment; filename=xxx.csv');
    res.setHeader('Content-type', 'text/csv');
    let log = LogSingleton.getLog(res)
    log.debug("test debug")
    xxx()
    //res.send("a,b\n1,2")
    res.sendFile("C:\\Users\\ZSurawej\\MyWork\\source\\loglibrary-node\\package.json")
    //log.send("", res);
}))

app.get('/sync',expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /");
    }
    let data = "ok"//{meta:{"response_code":20000}};
   res.send(data);
   log.send(data, res);
}));

app.get('/async',expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /");

        //let headers = log.get_log_header;

        //var xxx = sync_request('GET', 'http://localhost:5000/test2', {headers:headers});
        //#console.log(xxx.getBody())
    }
    let data = {meta:{"response_code":20000}};
    return axios.get('http://localhost:5000/test2',{headers:log.get_log_header}).then(
        (r)=>{
            log.debug("in async")
            res.send(data);
            return data;
        }).catch((e)=>{
            //next(e);
            res.send(data);
            return data;
        } );
}));

app.get('/flask', expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    headers = log.get_log_header;
    var body = sync_request('GET', 'http://localhost:5000/django', {headers:headers});
    console.log(body.getBody())
    let result = {meta:{response_code:20000, response_desc:"Success",data:{a:1}}};
    res.send(result);
    log.send(result, res);
 }));

app.get('/next', expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /next");
    }
    let result = {meta:{response_code:20000, response_desc:"Success",data:{a:1}}};
    res.send(result);
    next();
    return result;
}));

app.get('/error_test', expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /next");
    }
    let result = {meta:{response_code:20001, response_desc:"Test Fail",data:{a:1}}};
    res.send(result);
    next();
    return result;
}));

app.get('/next2', expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /next");
    }
    res.send("next2");
    next();
}));

app.get('/error', expressWarped((req, res, next) => {
    try{
        log = LogSingleton.getLog(res);
        if(log)
        {
            log.debug("route /error");
        }
        throw new Error("force error");
    }
    catch(e){
        log = LogSingleton.getLog(res);
        if(log)
        {
            log.debug("raise error");
        }
        next(e);
    }
}));
/*
app.use(expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("after route");
    }
    next()
}));

app.use(expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("after route2");
    }
}));
*/

// app.use((err, req, res, next) => {
//     console.log("after error", req.headers.xxxx)
//     req.headers.xxxx += "8";
//     res.status(500).send("error");
// });


app.use(expressErrorWarped((err, req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("next error");
        log.exception("error", err)
    }
    res.status(500).send("error");
    log.send("error", res);
}));

app.listen(port, () => console.log(`Example app listening on port ${port}!`))