const logging = require('log4js');
const ip = require("ip");
const _ = require('lodash');
//const uuidv4 = require('uuid/v4');
const { v4: uuidv4 } = require('uuid');
const moment = require("moment");
//const jwt = require("jsonwebtoken");
//var sync_request = request('sync-request');

let log_datetime_fmt = 'DD/MMM/YYYY HH:mm:ss.SSS';

const log_formatter = '%X{DATETIME}:;%X{ENGINE_NAME}:;%X{REFERRER_ENGINE}:;%X{IP_ADDRESS}:;%X{SOURCE_IP_ADDRESS}:;%X{MIDDLEWARE_SESSION_ID}:;%X{LOG_SESSION_ID}:;%X{LOG_SESSION_ID_FROM_HEADER}:;%X{SESSION_ID}:;%X{USER_ID}:;%X{CLIENT_ID}:;%X{ACTION_TYPE}:;%X{OBJECT_NAME}:;%X{DE_ACTIVITY_ID}:;[%X{LOG_TYPE}:%X{MODULE_NAME}:%X{CODE_LINE_NUMBER}] %m';
const exception_log_formatter = log_formatter + ' %s'; //%X{DATETIME}:;%X{ENGINE_NAME}:;%X{REFERRER_ENGINE}:;%X{IP_ADDRESS}:;%X{SOURCE_IP_ADDRESS}:;%X{MIDDLEWARE_SESSION_ID}:;%X{LOG_SESSION_ID}:;%X{LOG_SESSION_ID_FROM_HEADER}:;%X{SESSION_ID}:;%X{USER_ID}:;%X{CLIENT_ID}:;%X{ACTION_TYPE}:;%X{OBJECT_NAME}:;%X{DE_ACTIVITY_ID}:;[%X{LOG_TYPE}:%X{MODULE_NAME}:%X{CODE_LINE_NUMBER}] %m %s';

//const original_log_formatter = '%X{DATETIME}:;%X{ENGINE_NAME}:;%X{REFERRER_ENGINE}:;%X{IP_ADDRESS}:;%X{SOURCE_IP_ADDRESS}:;%X{MIDDLEWARE_SESSION_ID}:;%X{LOG_SESSION_ID}:;%X{LOG_SESSION_ID_FROM_HEADER}:;%X{SESSION_ID}:;%X{USER_ID}:;%X{CLIENT_ID}:;%X{ACTION_TYPE}:;%X{OBJECT_NAME}:;%X{DE_ACTIVITY_ID}:;[%X{LOG_TYPE}:%X{MODULE_NAME}:%X{CODE_LINE_NUMBER}] %m';

const old_log_formatter = '%X{DATETIME}:;%X{SESSION_ID}:;%X{FLOW_ID}:;%X{APP_LOG_EVENT_ID}:;%X{COMPONENT_CODE}:;%X{SUB_COMPONENT_CODE}:;%X{ENGINE_CODE}:;%X{LOG_TYPE}:;%X{ACTION_TYPE}:;%X{OBJECT_NAME}:;%X{USER_ID}:;%X{USER_ROLE}:;%X{USER_TYPE}:;%X{PROCESS_STATUS}:;%X{IP_ADDRESS}:;%X{SOURCE_IP_ADDRESS}:;%X{MIDDLEWARE_SESSION_ID}:;%X{REMARK}:;%X{RESERV01}:;%X{RESERV02}:;%X{RESERV03}:;%X{RESERV04}:;%X{WORKFLOW_ID}:;%X{PORTAL_ID}:;%X{SERVICE_ID}:;%X{SERVICE_NAME}:;# [%X{MODULE_NAME}:%X{CODE_LINE_NUMBER}] %m';
const old_exception_log_formatter = old_log_formatter + ' %s';

const json_log_format = '%m'

const log_layout = {
	type: 'pattern',
	pattern: log_formatter
}

const exception_log_layout = {
	type: 'pattern',
	pattern: exception_log_formatter
}


const old_log_layout = {
	type: 'pattern',
	pattern: old_log_formatter
}

const old_exception_log_layout = {
	type: 'pattern',
	pattern: old_exception_log_formatter
}

const json_log_layout = {
	type: 'pattern',
	pattern: json_log_format
}

let log_path = '/var/log/engine';
const logmax_size = 524288000;
const backup_file_count = 10;

let default_config = {
	appenders: {
		console: {
			type: 'console'
		},
		file: {
			type: 'file',
			filename: `${log_path}/v2_debug.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: log_layout,
			keepFileExt: true,
			mode:0o644
		},
		std_out: {
			type: 'console',
			layout: log_layout
		},
		json_std_out: {
			type: 'console',
			layout: json_log_layout
		},
		old_std_out: {
			type: 'console',
			layout: old_log_layout
		},
		exception_std_out: {
			type: 'console',
			layout: exception_log_layout
		},
		loblibtrn_handler: {
			type: 'file',
			filename: `${log_path}/v2_loglibtrn.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: log_layout,
			keepFileExt: true,
			mode:0o644
		},
		info_handler: {
			type: 'file',
			filename: `${log_path}/v2_info.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: log_layout,
			keepFileExt: true,
			mode:0o644
		},
		debug_handler: {
			type: 'file',
			filename: `${log_path}/v2_debug.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: log_layout,
			keepFileExt: true,
			mode:0o644
		},
		error_handler: {
			type: 'file',
			filename: `${log_path}/v2_error.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: log_layout,
			keepFileExt: true,
			mode:0o644
		},
		exception_handler: {
			type: 'file',
			filename: `${log_path}/v2_error.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: exception_log_layout,
			keepFileExt: true,
			mode:0o644
		},
		biz_handler: {
			type: 'file',
			filename: `${log_path}/biz.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: old_log_layout,
			keepFileExt: true,
			mode:0o644
		},
		activity_handler: {
			type: 'file',
			filename: `${log_path}/v2_activity.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: log_layout,
			keepFileExt: true,
			mode:0o644
		},
		user_activity_handler: {
			type: 'file',
			filename: `${log_path}/v3_activity_user.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: json_log_layout,
			keepFileExt: true,
			mode:0o644
		},
		user_management_handler: {
			type: 'file',
			filename: `${log_path}/v3_app_user_management.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: json_log_layout,
			keepFileExt: true,
			mode:0o644
		},
		user_authentication_handler: {
			type: 'file',
			filename: `${log_path}/v3_app_user_authentication.log`,
			maxLogSize: logmax_size,
			backups: backup_file_count,
			layout: json_log_layout,
			keepFileExt: true,
			mode:0o644
		},
	},
	categories: {
		info_log: {
			appenders: ['info_handler'],
			level: 'info'
		},
		debug_log: {
			appenders: ['debug_handler'],
			level: 'debug'
		},
		force_debug_log: {
			appenders: ['loblibtrn_handler'],
			level: 'error'
		},
		error_log: {
			appenders: ['error_handler'],
			level: 'error'
		},
		exception_log: {
			appenders: ['exception_handler'],
			level: 'error',
			enableCallStack: true
		},
		activity_log: {
			appenders: ['activity_handler'],
			level: 'info'
		},
		biz_log: {
			appenders: ['biz_handler'],
			level: 'info'
		},
		user_activity_log: {
			appenders: ['user_activity_handler'],
			level: 'info'
		},
		user_management_log: {
			appenders: ['user_management_handler'],
			level: 'info'
		},
		user_authentication_log: {
			appenders: ['user_authentication_handler'],
			level: 'info'
		},


		info_and_stdout_log: {
			appenders: ['std_out', 'info_handler'],
			level: 'info'
		},
		debug_and_stdout_log: {
			appenders: ['std_out', 'debug_handler'],
			level: 'debug'
		},
		force_debug_and_stdout_log: {
			appenders: ['std_out', 'loblibtrn_handler'],
			level: 'error'
		},
		error_and_stdout_log: {
			appenders: ['std_out', 'error_handler'],
			level: 'error'
		},
		exception_and_stdout_log: {
			appenders: ['exception_std_out', 'exception_handler'],
			level: 'error',
			enableCallStack: true
		},
		activity_and_stdout_log: {
			appenders: ['std_out', 'activity_handler'],
			level: 'info'
		},
		biz_and_stdout_log: {
			appenders: ['old_std_out', 'biz_handler'],
			level: 'info'
		},
		user_activity_and_stdout_log: {
			appenders: ['json_std_out', 'user_activity_handler'],
			level: 'info'
		},
		user_management_and_stdout_log: {
			appenders: ['json_std_out', 'user_management_handler'],
			level: 'info'
		},
		user_authentication_and_stdout_log: {
			appenders: ['json_std_out', 'user_authentication_handler'],
			level: 'info'
		},
		original_debug: {
			appenders: ['file'],
			level: 'debug'
		},
		default: {
			appenders: ['console'],
			level: 'debug'
		}
	}
	/*,
		disableClustering:false //default is true*/
}

class AUTHENTICATION_TYPE {
	static get __name__() {
		return "Authentication";
	}
	static get LOGIN() {
		return {
			value: "LI",
			__name__: this.__name__,
			type: this
		};
	}
	static get LOGOUT() {
		return {
			value: "LO",
			__name__: this.__name__,
			type: this
		};
	}
}

class USER_ACCOUNT_MANAGEMENT_TYPE {
	static get __name__() {
		return "User Account Management";
	}

	static get CREATE_USER() {
		return {
			value: "CU",
			__name__: this.__name__,
			type: this
		};
	}
	static get DELETE_USER() {
		return {
			value: "DU",
			__name__: this.__name__,
			type: this
		};
	}
	static get UPDATE_USER() {
		return {
			value: "UU",
			__name__: this.__name__,
			type: this
		};
	}
	static get CREATE_ROLE() {
		return {
			value: "CR",
			__name__: this.__name__,
			type: this
		};
	}
	static get DELETE_ROLE() {
		return {
			value: "DR",
			__name__: this.__name__,
			type: this
		};
	}
	static get UPDATE_ROLE() {
		return {
			value: "UR",
			__name__: this.__name__,
			type: this
		};
	}
	static get ACTIVATE_ACCOUNT() {
		return {
			value: "AA",
			__name__: this.__name__,
			type: this
		};
	}
	static get SUSPEND_ACCOUNT() {
		return {
			value: "SA",
			__name__: this.__name__,
			type: this
		};
	}
	static get LOCK_ACCOUNT() {
		return {
			value: "LA",
			__name__: this.__name__,
			type: this
		};
	}
	static get UNLOCK_ACCOUNT() {
		return {
			value: "UA",
			__name__: this.__name__,
			type: this
		};
	}
	static get RESET_PASSWORD() {
		return {
			value: "RP",
			__name__: this.__name__,
			type: this
		};
	}
	static get CHANGE_PASSWORD() {
		return {
			value: "CP",
			__name__: this.__name__,
			type: this
		};
	}
}

class APPLICATION_ACTIVITY_TYPE {
	static get __name__() {
		return "Application Activity";
	}

	static get CREATE() {
		return {
			value: "C",
			__name__: this.__name__,
			type: this
		};
	}
	static get UPDATE() {
		return {
			value: "U",
			__name__: this.__name__,
			type: this
		};
	}
	static get DELETE() {
		return {
			value: "D",
			__name__: this.__name__,
			type: this
		};
	}
	static get APPROVE() {
		return {
			value: "A",
			__name__: this.__name__,
			type: this
		};
	}
	static get REJECT() {
		return {
			value: "R",
			__name__: this.__name__,
			type: this
		};
	}
	static get UPLOAD() {
		return {
			value: "UP",
			__name__: this.__name__,
			type: this
		};
	}
	static get VIEW() {
		return {
			value: "V",
			__name__: this.__name__,
			type: this
		};
	}
	static get LAUNCH_FLOW() {
		return {
			value: "LF",
			__name__: this.__name__,
			type: this
		};
	}
}

class APPLICATION_PARAMETER_CHANGE_TYPE {
	static get __name__() {
		return "Application Parameter Change";
	}
	static get CREATE() {
		return {
			value: "C",
			__name__: this.__name__,
			type: this
		};
	}
	static get UPDATE() {
		return {
			value: "U",
			__name__: this.__name__,
			type: this
		};
	}
	static get DELETE() {
		return {
			value: "D",
			__name__: this.__name__,
			type: this
		};
	}
	static get APPROVE() {
		return {
			value: "A",
			__name__: this.__name__,
			type: this
		};
	}
	static get REJECT() {
		return {
			value: "R",
			__name__: this.__name__,
			type: this
		};
	}
}

class DATA_ACCESS_TYPE {
	static get __name__() {
		return "Data Access";
	}
	static get READ() {
		return {
			value: "RD",
			__name__: this.__name__,
			type: this
		};
	}
}

class ACTION_TYPE {
	static get AUTHENTICATION() {
		return AUTHENTICATION_TYPE
	}

	static get USER_ACCOUNT_MANAGEMENT() {
		return USER_ACCOUNT_MANAGEMENT_TYPE
	}

	static get APPLICATION_ACTIVITY() {
		return APPLICATION_ACTIVITY_TYPE
	}

	static get APPLICATION_PARAMETER_CHANGE() {
		return APPLICATION_PARAMETER_CHANGE_TYPE
	}

	static get DATA_ACCESS() {
		return DATA_ACCESS_TYPE
	}

	static get items() {
		return [
			ACTION_TYPE.AUTHENTICATION,
			ACTION_TYPE.USER_ACCOUNT_MANAGEMENT,
			ACTION_TYPE.APPLICATION_ACTIVITY,
			ACTION_TYPE.APPLICATION_PARAMETER_CHANGE,
			ACTION_TYPE.DATA_ACCESS
		]
	}
}


const field_required = ["ENGINE_NAME"]

var getErrorObject = () => {
	try {
		throw Error('')
	} catch (err) {
		return err;
	}
}

var stack = function () {

	var orig = Error.prepareStackTrace;
	Error.prepareStackTrace = function (_, stack) {
		return stack;
	};
	var err = getErrorObject();
	Error.captureStackTrace(err, arguments.callee);
	var stack = err.stack;
	Error.prepareStackTrace = orig;
	return stack;
}

var find_line_no = function (skip = 2) {
	let start = skip;
	let lineno = '';
	let __stack = stack();
	if (__stack.length < start + 1) {
		lineno = __stack[__stack.length - 1].getLineNumber();
	} else {
		lineno = __stack[start].getLineNumber();
	}

	return lineno;
};

var caller_name = function (skip = 2) {
	var __stack = stack();
	if (__stack.length < skip) {
		return '';
	}
	var filepath = (__stack[skip].getFileName() || "").trim();
	var index = filepath.lastIndexOf("/");
	if (index === -1) {
		index = filepath.lastIndexOf("\\");
	}

	if (index !== -1) {
		filepath = filepath.slice(index + 1);
	}

	var function_name = (__stack[skip].getFunctionName() || "").trim();

	if (function_name === "")
		return filepath;

	return `${filepath} (${function_name})`;
}

check_require_field = (settings) => {
	var found = true;
	const BreakException = {}
	try{
		_.forEach(field_required, function (value, index) {
			if ((settings[value] || "").trim() === "") {
				found = false;
				throw BreakException
			}
		})
	} catch(e) {}

	return found;
}

var parse_response = (result, path) => {
	if (typeof result === "string") {
		try {
			result = JSON.parse(result)
		} catch {}
	}
	if (typeof result === "object") {
		try {
			let output = result;
			_.forEach(path.split("/"), function (v, i) {
				output = output[v] || {};
			});
			return (typeof output !== "object") ? output : undefined;
		} catch {

		}
	}
	return undefined;
}

const is_static_file_path = (path) => {
	let pos_slash = path.lastIndexOf("/");
	let pos_dot = path.lastIndexOf(".");
	return pos_dot > pos_slash;
};

const write_error_end_state = (e, std_out, log) => {
	let used_time = ((Date.now() - log.start_time) / 1000.0).toFixed(6);
	log.exception(e.message, e, {
		std_out: std_out
	});
	log.force_debug(e.message, {
		state: "END",
		status: "FAIL",
		used_time: used_time,
		std_out: false
	});
	throw e;
}

const write_end_state = (std_out, res, result, log) => {
	let used_time = ((Date.now() - log.start_time) / 1000.0).toFixed(6);

	if (res.statusCode === 304) {
		log.force_debug("success", {
			state: "END",
			status: "SUCCESS",
			used_time: used_time,
			std_out: false
		});
	} else if (res.statusCode < 500) {
		let response_code = null;
		let response_desc = ""
		//let response_body = null

		//console.log(res.statusCode, res.statusMessage);

		if (res.hasHeader('content-disposition') || res._headers['content-type'] && !res._headers['content-type'].startsWith("application/json")) {
			log.force_debug("success", {
				state: "END",
				status: "SUCCESS",
				used_time: used_time,
				std_out: false
			});
		} else {
			if (result === undefined) {
				log.force_debug("success", {
					state: "END",
					status: "SUCCESS",
					used_time: used_time,
					std_out: false
				});
			} else {
				try {
					response_code = parse_response(result, log.settings.RESPONSE_CODE_PATH || "meta/response_code");
					if (response_code !== undefined) {
						let __response_code = parseInt(response_code, 10);
						if (!isNaN(__response_code)) {
							response_code = __response_code;
						}
					} else {
						response_code = null;
					}
					response_desc = parse_response(result, log.settings.RESPONSE_DESC_PATH || "meta/response_desc") || "";
				} catch {}

				if (response_code !== null) {
					if (response_code % 10000 === 0) {
						log.force_debug(response_desc, {
							state: "END",
							status: "SUCCESS",
							response_code: response_code,
							response_desc: response_desc,
							used_time: used_time,
							std_out: false
						});
					} else {
						log.force_debug(response_desc, {
							state: "END",
							status: "FAIL",
							response_code: response_code,
							response_desc: response_desc,
							used_time: used_time,
							std_out: false
						});
					}
				} else {
					log.force_debug('No Response Code or Invalid Response Code', {
						state: "END",
						status: "UNKNOWN",
						response_code: '',
						response_desc: 'No Response Code or Invalid Response Code',
						used_time: used_time,
						std_out: false
					});
				}
			}
		}
	} else {
		let message = res.statusMessage || "";
		if (result && result !== "") {
			if (typeof result === "object") {
				message = JSON.stringify(result);
			} else {
				message = result;
			}
		}
		log.error(message, {
			status_code: res.statusCode,
			status_message: message,
			std_out: std_out
		});
		log.force_debug(message, {
			state: "END",
			status: "FAIL",
			status_code: res.statusCode,
			status_message: message,
			used_time: used_time,
			std_out: false
		});
	}
}

const wrarped = (fn, ...args) => {
	//var err = undefined;
	let req = undefined;
	let res = undefined;
	//var next = undefined;
	let module_name = undefined;
	if (args[0].constructor.name === "Object") //NodeRed
	{
		req = args[0].req;
		res = args[0].res._res;
		if (args[1] && args[1].constructor.name !== "object") {
			module_name = args[1].constructor.name;
		}
	} else if (args[0].constructor.name === "IncomingMessage") //Express
	{
		req = args[0];
		res = args[1];
		//next = args[2];
	} else //Express Error
	{
		//err = args[0];
		req = args[1];
		res = args[2];
		//next = args[3];
	}

	//if(res && res.locals && res.locals.is_static === undefined)
	//{
	//	res.locals.is_static = is_static_file_path(req.path);
	//}

	if (!res || !res.locals || res.locals.is_static) {
		try {
			return fn(...args);
		} catch (e) {
			throw e;
		}
	}

	let log_session_id = uuidv4();

	let referrer_engine = this.engine_name;

	let __session = '';

	let request_headers = req.headers;

	let __std_out = false;
	//let __exc_info = false;

	if (request_headers) {
		if (request_headers["log-session-id"] === undefined) {
			request_headers["log-session-id"] = log_session_id;
		}

		if (request_headers['referrer-engine']) {
			referrer_engine = request_headers["referrer-engine"];
		}
	}

	var log = (new LogSingleton({}, referrer_engine, log_session_id, req, __session)).getInstance();



	if (res.locals.logs === undefined) {
		res.locals.logs = [];
	}


	if (module_name === undefined) {
		log.module_name = req.path + (res.locals.call_level ? ` (${res.locals.call_level})` : "");
		res.locals.call_level = (res.locals.call_level || 0) + 1;
	} else {
		log.module_name = module_name;
	}
	res.locals.log = log;
	res.locals.logs.push(log)

	log.force_debug('', {
		state: "BEGIN",
		std_out: __std_out
	});

	start = Date.now();
	log.start_time = start;
	var result = undefined;

	if (res.locals.flag_end === undefined) {
		res.locals.flag_end = true;
		var oriEnd = res.end
		res.locals.response_body = []
		res.end = (...args) => {
			if (args[0]) {
				res.locals.response_body.push(args[0])
			}

			//if(res.getHeaders)
			let __buffer_str = "";
			if (res.locals.response_body.length && typeof (res.locals.response_body[0]) === "string") {
				__buffer_str = res.locals.response_body[0];
			} else {
				__buffer_str = Buffer.concat(res.locals.response_body).toString("utf-8");
			}
			//if(true)//buffer.length === parseInt(res.getHeader("content-length")))
			//{
			//console.log(buffer.toString('utf8'));
			let count = 0;
			while (count < 10) {
				let __log = res.locals.logs.pop();
				if (__log) {
					count++;
					write_end_state(__std_out, res, __buffer_str, __log);
				} else {
					break;
				}
			}
			//}

			oriEnd.apply(res, args);
		}

	}

	try {
		result = fn(...args);

		if (result && result.then) {
			//deprecate 
			/*
			result.then(function(r){
				let count = 0;
				while(count < 10){
					let log = res.locals.logs.pop();
					if(log){
						count++;
						write_end_state(__std_out, res, r, log);
					}
					else{
						break;
					}
				}
			}).catch((e)=>{
				let count = 0;
				while(count < 10){
					let log = res.locals.logs.pop();
					if(log){
						count++;
						write_error_end_state(e, __std_out, log);
					}
					else{
						break;
					}
				}
			})
			*/
		}
	} catch (e) {
		write_error_end_state(e, __std_out, log);
	}

	/*
	used_time = ((Date.now() - start)/1000.0).toFixed(6);

	if(res.statusCode < 400)
	{
		response_code = null;
		response_desc = ""
		response_body = null

		//console.log(res.statusCode, res.statusMessage);

		if(result === undefined){
			log.force_debug("No return response data", {state:"END", status:"UNKNOWN", module_name:qualname, used_time:used_time, std_out:__std_out});
		}
		else{
			try{
				response_code  = parse_response(result, log.settings.RESPONSE_CODE_PATH || "meta/response_code");
				if(response_code !== undefined)
				{
					let __response_code = parseInt(response_code, 10);
					if(!isNaN(__response_code))
					{
						response_code = __response_code;
					}
				}
				else
				{
					response_code = null;
				}
				response_desc  = parse_response(result, log.settings.RESPONSE_DESC_PATH || "meta/response_desc") || "";
			}
			catch{}

			if(response_code !== null)
			{
				if(response_code%10000 === 0)
				{
					log.force_debug('', {state:"END", status:"SUCCESS", response_code:response_code, response_desc:response_desc, module_name:qualname, used_time:used_time, std_out:__std_out});
				}
				else
				{
					log.force_debug('', {state:"END", status:"FAIL", response_code:response_code, response_desc:response_desc, module_name:qualname, used_time:used_time, std_out:__std_out});
				}
			}
			else{
				log.force_debug('', {state:"END", status:"FAIL", response_code:'', response_desc:'No Response Code or Invalid Response Code', module_name:qualname, used_time:used_time, std_out:__std_out});
			}
		}
	}
	else
	{
		log.exception(res.statusMessage, {state:"END", status:"FAIL", status_code:res.statusCode, module_name:qualname, used_time:used_time, std_out:__std_out});
	}

	return result;
	*/
	//return result;
}

const expressErrorWarped = (fn) => {
	return (err, req, res, next) => {
		return wrarped(fn, err, req, res, next);
	};
}

const expressWarped = (fn) => {
	return (req, res, next) => {
		return wrarped(fn, req, res, next);
	};
}

const nodeRedWarped = (fn, node) => {
	return (msg) => {
		return wrarped(fn, msg, node);
	}
}

const decodeJWTBoday = (jwt_token) => {
	const raw = jwt_token.split(".")[1];
	return JSON.parse(Buffer.from(raw, 'base64'));
}

/*
function log_decorator(referrer_engine, log_session_id, log, exc_info, std_out) {
	let __referrer_engine = referrer_engine;
    let __log_session_id = log_session_id;
    let __log = log;
    let __exc_info = exc_info;
	let __std_out = std_out || false;
	
	return function decorator(target, name, descriptor) {
	  	const original = descriptor.value;
	  	if (typeof original === 'function') {
			descriptor.value = function(...args) {
				let log_session_id = __log_session_id || uuidv4();
				let referrer_engine = __referrer_engine || "";

				let log = __log;
				if(!log){
					let __session = '';
					let __request = args[0];
					let request_headers = __request.headers;
	
					if(request_headers){
						if(request_headers["log-session-id"] === undefined)
						{
							request_headers["log-session-id"] = log_session_id;
						}
						if(referrer_engine !== "")
						{
							request_headers["referrer-engine"] = referrer_engine;
						}
						else if(request_headers['referrer-engine'])
						{
							referrer_engine = request_headers["referrer-engine"];
						}
					}
					log = (new LogSingleton(referrer_engine, log_session_id, __request, __session)).getInstance();
				}

				let qualname = name;
		
				args.push({log:log});

				log.force_debug('', {state:"BEGIN", module_name:qualname, std_out:__std_out});
				start = Date.now();
				result = null;

				try{
					result = original.apply(this, args);
				}
				catch(e)
				{
					used_time = ((Date.now() - start)/1000.0).toFixed(6)
					message = e.message;
					log.exception(message, {message, state:"END", status:"FAIL", module_name:qualname, used_time:used_time, exc_info:__exc_info, std_out:__std_out});
					throw e;
				}

				used_time = ((Date.now() - start)/1000.0).toFixed(6);

				response_code = 20000
				response_desc = ""
				response_body = null

				if(result !== undefined){
					try{
						response = result.meta || {};
						response_code = parseInt(response.response_code || '22000', 10);
						response_desc = response.response_desc || 'Unknown';
					}
					catch{}
				}

				if(response_code === 20000)
				{
					log.force_debug('',{state:"END", status:"SUCCESS", module_name:qualname, used_time:used_time, std_out:__std_out});
				}
				else{
					log.force_debug(response_desc, {state:"END", status:"FAIL", response_code:response_code, module_name:qualname, used_time:used_time, std_out:__std_out});
				}
				
				return result;
			}
	  	}
	  	return descriptor;
	};
}
*/

class LogSingleton {
	//static __log_level = logging.levels.ALL;
	static setup(settings) {
		if (typeof (settings.LOG_PM2) === "boolean") {
			default_config.pm2 = settings.LOG_PM2;
			default_config.pm2InstanceVar = uuidv4();
		}
		if (typeof (settings.LOG_DISABLED_CLUSTERING) === "boolean") {
			default_config.disableClustering = settings.LOG_DISABLED_CLUSTERING;
		}
		/*
			appenders: {
		console: { type: 'console'},
		file: { type: 'file',filename: `${log_path}/v2_debug.log`, maxLogSize: logmax_size, backups:7,layout:original_log_layout},
		std_out: { type: 'console', layout:log_layout},
		exception_std_out: { type: 'console', layout:exception_log_layout},
		info_handler: { type: 'file', filename: `${log_path}/v2_info.log`, maxLogSize: logmax_size, backups:7, layout:log_layout},
		debug_handler: { type: 'file', filename: `${log_path}/v2_debug.log`, maxLogSize: logmax_size, backups:7, layout:log_layout},
		error_handler: { type: 'file', filename: `${log_path}/v2_error.log`, maxLogSize: logmax_size, backups:7, layout:log_layout},
		exception_handler: { type: 'file', filename: `${log_path}/v2_error.log`, maxLogSize: logmax_size, backups:7, layout:exception_log_layout},
		activity_handler: { type: 'file', filename: `${log_path}/v2_activity.log`, maxLogSize: logmax_size, backups:7, layout:log_layout}
	},
	*/
		if (typeof (settings.LOG_PATH) === "string") {
			default_config.appenders.loblibtrn_handler.filename = `${settings.LOG_PATH}/v2_loglibtrn.log`;
			default_config.appenders.file.filename = `${settings.LOG_PATH}/v2_debug.log`;
			default_config.appenders.info_handler.filename = `${settings.LOG_PATH}/v2_info.log`;
			default_config.appenders.debug_handler.filename = `${settings.LOG_PATH}/v2_debug.log`;
			default_config.appenders.error_handler.filename = `${settings.LOG_PATH}/v2_error.log`;
			default_config.appenders.exception_handler.filename = `${settings.LOG_PATH}/v2_error.log`;
			default_config.appenders.activity_handler.filename = `${settings.LOG_PATH}/v2_activity.log`;
			if (settings.ENGINE_CODE) {
				default_config.appenders.biz_handler.filename = `${settings.LOG_PATH}/biz_${settings.ENGINE_CODE}.log`;
			} else {
				default_config.appenders.biz_handler.filename = `${settings.LOG_PATH}/biz.log`;
			}
			default_config.appenders.user_activity_handler.filename = `${settings.LOG_PATH}/v3_activity_user.log`;
			default_config.appenders.user_management_handler.filename = `${settings.LOG_PATH}/v3_app_user_management.log`;
			default_config.appenders.user_authentication_handler.filename = `${settings.LOG_PATH}/v3_app_user_authentication.log`;
		}

		logging.configure(default_config);
		(new LogSingleton(settings));
	}

	static get LogLevel() {
		return {
			DEBUG: logging.levels.DEBUG,
			INFO: logging.levels.INFO,
			ERROR: logging.levels.ERROR,
			ALL: logging.levels.ALL,
		}
	}

	static setLogLevel(log_level) {
		switch (log_level) {
			case logging.levels.DEBUG:
				LogSingleton.__log_level = logging.levels.DEBUG;
				break;
			case logging.levels.INFO:
				LogSingleton.__log_level = logging.levels.INFO;
				break;
			case logging.levels.ERROR:
				LogSingleton.__log_level = logging.levels.ERROR;
				break;
			case logging.levels.ALL:
				LogSingleton.__log_level = logging.levels.ALL;
				break;
			default:
				LogSingleton.__log_level = logging.levels.ERROR;
				break;
		}
	}

	static getLogLevel() {
		return LogSingleton.__log_level || logging.levels.ERROR;
	}

	static getLog(res, predefined_args) {
		let __res = undefined;
		if (res) {
			if (res.constructor.name === "Object") {
				if (res.res) {
					__res = res.res._res;
				}
			} else {
				__res = res;
			}
		}

		if (__res && __res.locals) {
			if (__res.locals.log === undefined) {
				__res.locals.log = LogSingleton.getOriginalLog(predefined_args)
			} else {
				if (__res.locals.log.predefined_args) {
					_.merge(__res.locals.log.predefined_args, predefined_args)
				} else {
					__res.locals.log.predefined_args = predefined_args;
				}
			}

			return __res.locals.log;
		}
		return LogSingleton.getOriginalLog(predefined_args);
	}

	static getOriginalLog(predefined_args) {
		return (new LogSingleton({})).getInstance(predefined_args);
	}

	static getLogModel() {
		return _.cloneDeep(LogSingleton.instance.log_model)
	}

	constructor(settings, referrer_engine, log_session_id, request, session) {
		if (!LogSingleton.instance) {
			if (check_require_field(settings)) {
				LogSingleton.instance = new TfgLogger(settings);
				//console.log("create log instance");
			} else {
				throw new Error(`Setting not found value of ${field_required}`);
			}
		}

		this.referrer_engine = referrer_engine;
		this.log_session_id = log_session_id;
		this.request = request;
		this.session = session;
		this.log_level = logging.levels.ERROR
	}

	getInstance(predefined_args) {
		return new TfgLogger.SubLogger(LogSingleton.instance, this.referrer_engine, this.log_session_id, this.request, this.session, predefined_args);
	}
}


class TfgLogger {
	constructor(settings) {
		this.settings = settings;
		this.log_model = {
			'ENGINE_NAME': this.settings.ENGINE_NAME || '',
			'REFERRER_ENGINE': '',
			'IP_ADDRESS': ip.address(),
			'SOURCE_IP_ADDRESS': '',
			'MIDDLEWARE_SESSION_ID': '',
			'LOG_SESSION_ID': '',
			'LOG_SESSION_ID_FROM_HEADER': '',
			'SESSION_ID': '',
			'USER_ID': '',
			'CLIENT_ID': '',
			'ACTION_TYPE': '', //for activity log
			'OBJECT_NAME': '', //for activity log
			'DE_ACTIVITY_ID': '', //for de
			'LOG_TYPE': '',
			'MODULE_NAME': '',
			'CODE_LINE_NUMBER': '',
			//for old log
			'FLOW_ID': '',
			'APP_LOG_EVENT_ID': '',
			'COMPONENT_CODE': '',
			'SUB_COMPONENT_CODE': '',
			'ENGINE_CODE': this.settings.ENGINE_CODE || '',
			'REMARK': '',
			'RESERV01': '',
			'RESERV02': '',
			'RESERV03': '',
			'RESERV04': '',
			'USER_ROLE': '',
			'USER_TYPE': '',
			'PROCESS_STATUS': '',
			'WORKFLOW_ID': '',
			'PORTAL_ID': '',
			'SERVICE_ID': '',
			'SERVICE_NAME': ''
		}
	}
}

TfgLogger.SubLogger = class {
	constructor(tfg_logger, referrer_engine, log_session_id, request, session, predefined_args) {
		this.tfg_logger = tfg_logger;
		this.log_model = _.cloneDeep(this.tfg_logger.log_model);

		this.__settings = _.cloneDeep(this.tfg_logger.settings);
		this.__log_session_id = log_session_id;
		this.__log_session_id_from_header = "";
		this.__referrer_engine = referrer_engine || this.engine_name;
		this.__module_name = "";

		this.__client_id = null;
		this.__client_secret = null;
		this.http_request = null;
		this.__session = null;
		this.__app_meta = {};

		this.__client_header = {};

		this.__client_models = {};

		this.request = request;

		this.session = session;

		this.__start_time = 0;

		this.predefined_args = predefined_args;
	}

	set predefined_args(predefined_args) {
		this.__predefined_args = predefined_args || {};
	}

	get predefined_args() {
		return this.__predefined_args || {};
	}

	get __info_log() {
		let __log = logging.getLogger("info_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __debug_log() {
		let __log = logging.getLogger("debug_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __force_debug_log() {
		return logging.getLogger("force_debug_log");
	}

	get __error_log() {
		let __log = logging.getLogger("error_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __exception_log() {
		let __log = logging.getLogger("exception_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __activity_log() {
		let __log = logging.getLogger("activity_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __user_activity_log() {
		let __log = logging.getLogger("user_activity_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __user_management_log() {
		let __log = logging.getLogger("user_management_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __user_authentication_log() {
		let __log = logging.getLogger("user_authentication_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __biz_log() {
		let __log = logging.getLogger("biz_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __info_and_stdout_log() {
		let __log = logging.getLogger("info_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __debug_and_stdout_log() {
		let __log = logging.getLogger("debug_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __force_debug_and_stdout_log() {
		return logging.getLogger("force_debug_and_stdout_log");
	}

	get __error_and_stdout_log() {
		let __log = logging.getLogger("error_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __exception_and_stdout_log() {
		let __log = logging.getLogger("exception_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __activity_and_stdout_log() {
		let __log = logging.getLogger("activity_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __user_activity_and_stdout_log() {
		let __log = logging.getLogger("user_activity_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __user_management_and_stdout_log() {
		let __log = logging.getLogger("user_management_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __user_authentication_and_stdout_log() {
		let __log = logging.getLogger("user_authentication_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get __biz_and_stdout_log() {
		let __log = logging.getLogger("biz_and_stdout_log");
		__log.level = LogSingleton.getLogLevel()
		return __log;
	}

	get settings() {
		return this.__settings;
	}

	get request() {
		return this.http_request;
	}

	set request(request) {
		this.http_request = request;
	}

	get session() {
		return this.__session;
	}

	set session(session) {
		this.__session = session;
		if (this.__session !== null) {
			this.gen_session_log_model;
		}
	}

	get log_session_id() {
		if (!this.__log_session_id) {
			this.__log_session_id = uuidv4();
		}

		return this.__log_session_id;
	}

	get referrer_engine() {
		return this.__referrer_engine;
	}

	get engine_name() {
		return this.log_model.ENGINE_NAME || '';
	}

	get log_session_id_from_header() {
		return this.__log_session_id_from_header;
	}

	get module_name() {
		return this.__module_name;
	}

	set module_name(name) {
		this.__module_name = name;
	}

	get get_request_headers() {
		if (this.request) {
			return this.request.headers;
		}
		return {}
	}

	get get_log_header() {
		var log_header = {
			"log-session-id": this.get_log_session_id_from_header,
			"referrer-engine": this.engine_name
		};
		return {
			...log_header,
			...this.get_client_headers
		};
	}

	get get_source_ip() {
		if (this.request) {
			/*
			let headers = this.get_request_headers;
			let x_forwarded_for = headers.HTTP_X_FORWARDED_FOR || headers['x-forwarded-for'] || '';
			if(x_forwarded_for !== ''){
				ip = x_forwarded_for.split(',')[0];
			}
			else{
				ip = headers.REMOTE_ADDR || headers['remote-addr'] || this.request.ip || '';
			}*/
			return ''; //this.request.ip || '';
		}
		return '';
	}

	get get_middlerware_session_id() {
		if (this.request) {
			try {
				return this.request.sessionID || '';
			} catch {}
		}
		return '';
	}

	get get_referrer_engine() {
		if (this.request) {
			let headers = this.get_request_headers;
			return headers.HTTP_REFERRER_ENGINE || headers.referrer - engine || "";
		}
		return this.referrer_engine;
	}

	get get_log_session_id_from_header() {
		if (this.request) {
			let headers = this.get_request_headers;
			return headers['log-session-id'] || '';
		}
		return this.log_session_id;
	}

	get get_client_headers() {
		let client_headers = {}

		if (this.request) {
			let headers = this.get_request_headers;
			let __client_id = headers['client_id'] || null
			let __client_secret = null //headers['client_secret]
			let __app_meta = headers['app-meta'] || null

			if (__client_id !== null) {
				client_headers['client-id'] = __client_id;
				this.__client_models.CLIENT_ID = __client_id;
			}

			if (__client_secret !== null) {
				client_headers['client-secret'] = __client_secret
				//this.__client_models["client_secret"] = __client_secret;
			}
			try {
				if (__app_meta !== null) {
					this.__app_meta = JSON.parse(__app_meta);
					client_headers['app-meta'] = __app_meta;
				}
			} catch (e) {
				this.__app_meta = {};
				console.log("ERROR PARSE APP-META TO DICT", e.message, headers.HTTP_APP_META, headers['app-meta'] || '')
			}
		}
		return client_headers
	}

	get gen_session_log_model() {
		this.__log_session_id_from_header = this.get_log_session_id_from_header;
		this.__client_header = this.get_client_headers;

		if (this.__app_meta.user_id) {
			this.__client_models.USER_ID = this.__app_meta.user_id;
		}

		this.log_model.SESSION_ID = this.__app_meta.log_session_id || ''
		this.log_model.SOURCE_IP_ADDRESS = this.get_source_ip;
		this.log_model.MIDDLEWARE_SESSION_ID = this.get_middlerware_session_id;
	}

	get start_time() {
		return this.__start_time;
	}

	set start_time(start) {
		this.__start_time = start;
	}

	send(msg, res) {
		//deprecate
		/*
		if(res === undefined && msg.res)
		{
			res = msg.res._res;
		}
		if(res && res.constructor.name === "ServerResponse")
		{
			let count = 0;
			while(count < 10){
				let log = res.locals.logs.pop();
				if(log){
					count++;
					write_end_state(false, res, msg, log);
				}
				else{
					break;
				}
			}
		}
		*/
	}

	convert_message_to_string(message) {
		if (message === undefined) {
			return "";
		}
		if (typeof (message) === "object") {
			return JSON.stringify(message)
		}

		return '' + message;
	}

	gen_message_log(message, kwargs, json_format) {
		let prefix_message = {};
		let extension = {};
		let msg = [];
		let result = "";

		let __msg = message;
		if (json_format !== true) {
			__msg = (this.convert_message_to_string(message) || '').trim();
		}

		if (typeof (this.predefined_args) === "object") {
			prefix_message = _.cloneDeep(this.predefined_args);
		}

		if (typeof (kwargs) === 'object') {
			let __message = (kwargs.message || '').trim();
			delete kwargs.message;

			if (__message !== '') {
				if (__msg !== '') {
					if (json_format === true) {
						extension.message = __message;
					} else {
						__msg = `${__msg} ${__message}`;
					}
				}
			}
		}

		if (Object.keys(prefix_message).length) {
			_.forEach(kwargs, function (v, k) {
				if (prefix_message[k] !== undefined) {
					prefix_message[k] = v;
					delete kwargs[k];
				}
			});
			_.forEach(prefix_message, (v, k) => {
				if (json_format === true) {
					extension[k] = v;
				} else {
					if (typeof (v) === "number") {
						msg.push(`${k}="${v}"`);
					} else {
						msg.push(`${k}=${JSON.stringify(v)}`);
					}
				}
			});
		}

		_.forEach(kwargs, (v, k) => {
			if (json_format === true) {
				extension[k] = v;
			} else {
				if (typeof (v) === "number") {
					msg.push(`${k}="${v}"`);
				} else {
					msg.push(`${k}=${JSON.stringify(v)}`);
				}
			}
		});

		if (json_format === true) {
			let output = {};
			if (typeof (__msg) == "object") {
				output = __msg;
			} else {
				output = {
					message: _msg
				}
			}

			if (Object.keys(extension).length) {
				output.Extension = extension
			}

			result = JSON.stringify(output);

		} else {
			if (!!__msg) {
				msg.push(__msg);
			}

			result = msg.join(' ');
		}
		return result;
	}

	update_log_model(log_model, kwargs) {
		var items = {}
		_.forEach(kwargs, function (v, k) {
			if (log_model[k] === undefined) {
				items[k] = v
			}
		})
		return items;
	}

	__writelog(message, kwargs) {
		let json_format = false;
		var module_name = this.module_name;
		if (module_name === "") {
			if (kwargs) {
				module_name = kwargs.module_name || caller_name(3);
			} else {
				module_name = caller_name(3);
			}
		}
		if (kwargs) {
			delete kwargs.module_name;
			json_format = kwargs.__json_format || false;
			delete kwargs.__json_format;
		}

		var items = this.update_log_model(this.log_model, kwargs);

		var extra_log = _.cloneDeep(this.log_model);

		if (this.__client_models !== null) {
			Object.assign(extra_log, this.__client_models);
		}

		extra_log.CODE_LINE_NUMBER = find_line_no(3);
		extra_log.REFERRER_ENGINE = this.referrer_engine;
		extra_log.LOG_SESSION_ID = this.log_session_id || '';
		extra_log.LOG_SESSION_ID_FROM_HEADER = this.log_session_id_from_header || extra_log.LOG_SESSION_ID;
		extra_log.MODULE_NAME = module_name

		var msg = this.gen_message_log(message, items, json_format);

		return {
			message: msg,
			extra_log: extra_log
		}
	}

	update_log_context_and_write(__log, level, message, contexts, throwable) {
		//console.log('xxx', __log)
		__log.context = contexts;
		if (typeof (this.settings.DATE_FORMAT) === "string") {
			log_datetime_fmt = this.settings.DATE_FORMAT
		}
		__log.addContext("DATETIME", moment().format(log_datetime_fmt));
		switch (level) {
			case 'info':
				__log.info(message);
				break;
			case 'debug':
				__log.debug(message);
				break;
			case 'error':
				__log.error(message, throwable || "");
				break;
			case 'fatal':
				__log.fatal(message, throwable || "");
				break;
			default:
				__log.info(message);
				break;
		}
		__log.clearContext();
	}

	info(message, kwargs) {
		//var exc_info = false;
		var std_out = this.settings.LOG_TO_CONSOLE || false;
		if (kwargs) {
			//exc_info = (kwargs.exc_info || false) === true;
			if (kwargs.std_out !== undefined) {
				std_out = kwargs.std_out === true;
				delete kwargs.std_out;
			}
			delete kwargs.exc_info;

		}

		var result = this.__writelog(message, kwargs);

		result.extra_log.LOG_TYPE = 'Info'

		if (std_out) {
			this.update_log_context_and_write(this.__info_and_stdout_log, 'info', result.message, result.extra_log)
		} else {
			this.update_log_context_and_write(this.__info_log, 'info', result.message, result.extra_log)
		}
	}

	debug(message, kwargs) {
		//var exc_info = false;
		var std_out = this.settings.LOG_TO_CONSOLE || false;
		if (kwargs) {
			//exc_info = (kwargs.exc_info || false) === true;
			if (kwargs.std_out !== undefined) {
				std_out = kwargs.std_out === true;
				delete kwargs.std_out;
			}
			delete kwargs.exc_info;
		}

		var result = this.__writelog(message, kwargs);

		result.extra_log.LOG_TYPE = 'Debug'

		if (std_out) {
			this.update_log_context_and_write(this.__debug_and_stdout_log, 'debug', result.message, result.extra_log)
		} else {
			this.update_log_context_and_write(this.__debug_log, 'debug', result.message, result.extra_log)
		}
	}

	force_debug(message, kwargs) {
		//var exc_info = false;
		var std_out = this.settings.LOG_TO_CONSOLE || false;
		if (kwargs) {
			//exc_info = (kwargs.exc_info || false) === true;
			if (kwargs.std_out !== undefined) {
				std_out = kwargs.std_out === true;
				delete kwargs.std_out;
			}
			delete kwargs.exc_info;
		}

		var result = this.__writelog(message, kwargs);

		result.extra_log.LOG_TYPE = 'Log Transaction'

		if (std_out) {
			this.update_log_context_and_write(this.__force_debug_and_stdout_log, 'error', result.message, result.extra_log)
		} else {
			this.update_log_context_and_write(this.__force_debug_log, 'error', result.message, result.extra_log)
		}
	}

	error(message, kwargs) {
		//var exc_info = false;
		var std_out = this.settings.LOG_TO_CONSOLE || false;
		if (kwargs) {
			//exc_info = (kwargs.exc_info || false) === true;
			if (kwargs.std_out !== undefined) {
				std_out = kwargs.std_out === true;
				delete kwargs.std_out;
			}
			delete kwargs.exc_info;
		}

		var result = this.__writelog(message, kwargs);

		result.extra_log.LOG_TYPE = 'Error'

		if (std_out) {
			this.update_log_context_and_write(this.__error_and_stdout_log, 'error', result.message, result.extra_log)
		} else {
			this.update_log_context_and_write(this.__error_log, 'error', result.message, result.extra_log)
		}
	}

	exception(message, throwable, kwargs) {
		//var exc_info = false;
		var std_out = this.settings.LOG_TO_CONSOLE || false;
		if (kwargs) {
			//exc_info = (kwargs.exc_info || false) === true;
			if (kwargs.std_out !== undefined) {
				std_out = kwargs.std_out === true;
				delete kwargs.std_out;
			}
			delete kwargs.exc_info;
		}

		var result = this.__writelog(message, kwargs);

		result.extra_log.LOG_TYPE = 'Error'

		if (std_out) {
			this.update_log_context_and_write(this.__exception_and_stdout_log, 'error', result.message, result.extra_log, throwable)
		} else {
			this.update_log_context_and_write(this.__exception_log, 'error', result.message, result.extra_log, throwable)
		}
	}

	activity(action_type, object_name, message, kwargs) { //key de_activity_id = DE_ACTIVITY_ID
		if (object_name) {
			object_name = object_name.trim();
		} else {
			object_name = "";
		}

		if (object_name === "") {
			throw new Error("Object name is required");
		}

		if (ACTION_TYPE.items.includes(action_type.type)) {
			//var exc_info = false;

			var std_out = this.settings.LOG_TO_CONSOLE || false;

			var de_activity_id = "";
			if (kwargs) {
				//exc_info = (kwargs.exc_info || false) === true;
				if (kwargs.std_out !== undefined) {
					std_out = kwargs.std_out === true;
					delete kwargs.std_out;
				}
				de_activity_id = kwargs.de_activity_id || '';
				delete kwargs.exc_info;
				delete kwargs.de_activity_id;
			}

			var result = this.__writelog(message, kwargs);

			result.extra_log.LOG_TYPE = action_type.__name__;
			result.extra_log.ACTION_TYPE = action_type.value;
			result.extra_log.OBJECT_NAME = object_name;
			result.extra_log.DE_ACTIVITY_ID = de_activity_id;

			if (std_out) {
				this.update_log_context_and_write(this.__activity_and_stdout_log, 'info', result.message, result.extra_log)
			} else {
				this.update_log_context_and_write(this.__activity_log, 'info', result.message, result.extra_log)
			}
		} else {
			throw new Error("Invalid action type")
		}
	}

	biz(message, kwargs) {
		//var exc_info = false;
		var std_out = this.settings.LOG_TO_CONSOLE || false;
		if (kwargs) {
			//exc_info = (kwargs.exc_info || false) === true;
			if (kwargs.std_out !== undefined) {
				std_out = kwargs.std_out === true;
				delete kwargs.std_out;
			}
			delete kwargs.exc_info;
		}

		var result = this.__writelog(message, kwargs);

		['ACTION_TYPE', 'USER_ID', 'FLOW_ID', 'OBJECT_NAME', 'USER_ROLE', 'USER_TYPE', 'PROCESS_STATUS', 'COMPONENT_CODE', 'SUB_COMPONENT_CODE', 'REMARK', 'RESERV01',
			'RESERV02', 'RESERV03', 'RESERV04', 'WORKFLOW_ID', 'PROTAL_ID', 'SERVICE_ID', 'SERVICE_NAME'
		].forEach(v => {
			result.extra_log[v] = kwargs[v] || "";
			delete kwargs[v];
		});

		result.extra_log.LOG_TYPE = 'Business Log';
		result.extra_log.APP_LOG_EVENT_ID = result.extra_log.LOG_SESSION_ID;
		result.extra_log.MODULE_NAME = "biz_log";

		if (std_out) {
			this.update_log_context_and_write(this.__biz_and_stdout_log, 'info', result.message, result.extra_log)
		} else {
			this.update_log_context_and_write(this.__biz_log, 'info', result.message, result.extra_log)
		}
	}

	user_activity(kwargs) {
		const result = this.__user_activity(kwargs)
		if (result.std_out) {
			this.update_log_context_and_write(this.__user_activity_and_stdout_log, 'info', result.message, result.extra_log)
		} else {
			this.update_log_context_and_write(this.__user_activity_log, 'info', result.message, result.extra_log)
		}
	}

	user_management(kwargs) {
		const result = this.__user_activity(kwargs)
		if (result.std_out) {
			this.update_log_context_and_write(this.__user_management_and_stdout_log, 'info', result.message, result.extra_log)
		} else {
			this.update_log_context_and_write(this.__user_management_log, 'info', result.message, result.extra_log)
		}
	}

	user_authentication(kwargs) {
		const result = this.__user_activity(kwargs)
		if (result.std_out) {
			this.update_log_context_and_write(this.__user_authentication_and_stdout_log, 'info', result.message, result.extra_log)
		} else {
			this.update_log_context_and_write(this.__user_authentication_log, 'info', result.message, result.extra_log)
		}
	}

	__gen_user_activity_info(actor) {
		let output = {}
		const actor_type = typeof (actor)
		try {
			if (actor_type === "string") {
				const actor_decode = decodeJWTBoday(actor)
				output.type = 'User'
				output.name = actor_decode.preferred_username || ""
				output.id = actor_decode.user_id || ""
				output.detail = {}
				output.detail.register_service_id = actor_decode.regis_service_id || ""
				output.detail.idp_env = actor_decode.idp_env || "employee"
				output.detail.employee_detail = actor_decode.employee_detail || {}
				output.detail.customer_detail = actor_decode.customer_detail || {}
			} else {
				output.type = "User (unverified)"
				try {
					output.id = actor.id || ""
					output.name = actor.name || ""
					output.detail = actor.detail || {}
				} catch (e) {
					output.id = ""
					output.name = ""
					output.detail = {}
				}
			}
			if (typeof (output.detail) !== "object") {
				if (!!output.detail) {
					output.detail = {
						"error": "detail is not key-value format"
					}
				} else {
					output.detail = {}
				}
			}
		} catch (e) {
			output = {
				type: 'Error',
				error: e.message || 'UNKNOWN'
			}
			this.error(`Gen User Activitivy Info [JWT decode Error]: ${e.message || "UNKNOWN"}`)
		}


		return output
	}

	__user_activity(kwargs) {
		var std_out = this.settings.LOG_TO_CONSOLE || false;
		if (kwargs) {
			//exc_info = (kwargs.exc_info || false) === true;
			if (kwargs.std_out !== undefined) {
				std_out = kwargs.std_out === true;
				delete kwargs.std_out;
			}
			delete kwargs.exc_info;
		} else {
			kwargs = {};
		}

		let prefix_message = {};
		if (typeof (this.predefined_args) === "object") {
			prefix_message = _.cloneDeep(this.predefined_args);
		}

		_.forEach(prefix_message, (v, k) => {
			if (kwargs[k] === undefined) {
				kwargs[k] = v;
			}
		})

		let actor_request = prefix_message.Actor || "";

		let event_write = kwargs.Event || {};
		let target_write = kwargs.Target || {};
		let actor_write = kwargs.Actor || {};

		['Event', 'Target', 'Actor'].forEach(v => {
			delete kwargs[v];
		});

		let actor = {};

		if (Object.keys(actor_write).length) {
			actor = this.__gen_user_activity_info(actor_write)
		} else if (Object.keys(actor_request).length) {
			actor = this.__gen_user_activity_info(actor_request)
		} else {
			actor = {
				'type': 'User (unverified)',
				'name': "",
				'id': "",
				'detail': {}
			}
		}

		//let currentTimeInMilliseconds = Date.now();
		let timestamp = Date.now();

		let event_object = {
			"Time": timestamp,
			"Actor": actor,
			"Event": event_write,
			"Target": target_write
		}
		kwargs.__json_format = true;
		var result = this.__writelog(event_object, kwargs);
		result.extra_log.LOG_TYPE = 'User_activity';

		result.std_out = std_out
		return result
	}
}

module.exports = {
	expressWarped,
	expressErrorWarped,
	LogSingleton,
	ACTION_TYPE,
	nodeRedWarped
}