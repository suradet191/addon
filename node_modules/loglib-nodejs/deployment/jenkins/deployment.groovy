#!groovy

def git_branch = params.branch
def pkg_version=""

pkg_version = git_branch + ".${BUILD_NUMBER}"
/*if (params.APP_VERSION) {
   pkg_version = params.APP_VERSION
}*/
if (params.COMMIT_HASH) {
   git_branch = params.COMMIT_HASH
}

node {
 timestamps {
    try {
        deleteDir()

        stage('Clone') {
                def git_repo_url = scm.getUserRemoteConfigs()[0].getUrl()
		// def git_repo_url = "https://git-codecommit.us-east-1.amazonaws.com/v1/repos/loglibrary-node"

                final scmVars =  checkout scm: [
                                    $class: 'GitSCM',
                                    userRemoteConfigs: [[url: git_repo_url]],
                                    branches: [[name: git_branch]]
                                ], poll: false
                echo "scmVars.GIT_COMMIT: ${scmVars.GIT_COMMIT}"
                echo "scmVars.GIT_BRANCH: ${scmVars.GIT_BRANCH}"

                def GIT_COMMIT_SHORT = scmVars.GIT_COMMIT.substring(0,8)
                currentBuild.displayName = "$pkg_version (${GIT_COMMIT_SHORT}) (build:${BUILD_NUMBER})"
                currentBuild.description = "${scmVars.GIT_COMMIT}"
        }

        stage('SourceCode Scan'){
                if(params.sourcecode_scan != "ignore-execute-checkmarx")
                {
                    step(
                        [
                            $class: 'CxScanBuilder', comment: '', credentialsId: '', excludeFolders: '', excludeOpenSourceFolders: '',
                            exclusionsSetting: 'job', failBuildOnNewResults: false, failBuildOnNewSeverity: 'HIGH',
                            filterPattern: '''!**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*,  !**/.bzr/**/*, !**/bin/**/*,
                                !**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr,     !**/*.iws,
                                !**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3,
                                !**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx,
                                !**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob,
                                !**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf,
                                !**/*.jar,     !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz,
                                !**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm,
                                !**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.war, !**/*.ear,
                                !**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm,
                                !**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*,
                                !**/example/**/*, !**/deployment/**/*, !**/test*.js''',
                            fullScanCycle: 10, generateXmlReport: true, groupId: '614d2688-5bcc-4971-8e9f-13c310eace54', includeOpenSourceFolders: '',
                            osaArchiveIncludePatterns: '*.zip, *.war, *.ear, *.tgz', osaInstallBeforeScan: false,
                            password: '{AQAAABAAAAAQeA9mPqzrlualYJ91gDRyr4JrrCsWmSHv8RyKKxX1Joo=}', preset: '100004', projectName: 'loglibrary-node',
                            sastEnabled: true, serverUrl: 'https://securitysourcecodescan-service.tiscogroup.com', sourceEncoding: '1', username: '',
                            vulnerabilityThresholdResult: 'FAILURE', waitForResultsEnabled: true
                        ]
                    )
                }
                else{
                    println "Skip SourceCode Scan Stage"
                }
        }       

        stage('Deploy') {
            print('Build stage is executing')
            env.DeloyToArtifactoryServer = params.DeloyToArtifactoryServer
            sh """
                cp deployment/package.json package.json

                sed -i "s:@VERSION@:${pkg_version}:g" package.json

                rm -rf deployment/package.json

                if  [ $DeloyToArtifactoryServer == "true" ]
                then
                    npm publish
                else
                    npm pack
                fi
            """
        }

       stage('Verify') {
            if(params.DeloyToArtifactoryServer) {
                if ( sh(returnStdout: true, script: """npm search loglib-nodejs | grep -c ${pkg_version}""").trim() != "1") {
                    error("Build failed because loglib-nodejs-${pkg_version} was not founded")
                }
                print "verify passed because loglib-nodejs ${pkg_version} was founded"
            } else {
                print "ignore deployment verification"
            }
       }
    } catch (e) {
        echo "Something went wrong: " + e.toString()
        throw e
    }
  }
}
