
const {expressWarped, expressErrorWarped, LogSingleton, ACTION_TYPE} = require("loglib-nodejs");
const request = require("request");
const axios = require("axios");
var sync_request = require('sync-request');
const config = require('./config.json');

const express = require('express')
const app = express()
const port = 3000

LogSingleton.setup(config);

let x = (log) => {
    log.debug("test log");
}

app.use(expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("befor route 1");
        log.activity(ACTION_TYPE.AUTHENTICATION.LOGIN, "surawej", "test activity", {'std_out':true});
        log.error("ssss")
        try{
            throw new Error("sss");
        }
        catch(e){
            log.exception()
        }
        x(log);
    }
    next()
}));

app.use(expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("befor route 2");
    }
    next()
}));


let promise = new Promise(function(resolve, reject) {
        resolve(123);
        reject(456);
  });

app.get('/',expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /");

        //let headers = log.get_log_header;

        //var xxx = sync_request('GET', 'http://localhost:5000/test2', {headers:headers});
        //#console.log(xxx.getBody())
    }
    let data = {meta:{"response_code":20000}};
    /*return axios.get('http://localhost:5000/test2222',{headers:log.get_log_header}).then(
        (r)=>{
            res.send(data);
            return data;
        }).catch((e)=>{
            next(e);
        } );
    */
    //log.set_result();
    res.send(data);
    //next(new Error("sss"));
    //return data;
}));

app.get('/async',expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /");

        //let headers = log.get_log_header;

        //var xxx = sync_request('GET', 'http://localhost:5000/test2', {headers:headers});
        //#console.log(xxx.getBody())
    }
    let data = {meta:{"response_code":20000}};
    return axios.get('http://localhost:5000/test2',{headers:log.get_log_header}).then(
        (r)=>{
            log.debug("in async")
            res.send(data);
            return data;
        }).catch((e)=>{
            next(e);
        } );
}));

app.get('/flask', expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    headers = log.get_log_header;
    var body = sync_request('GET', 'http://localhost:5000/django', {headers:headers});
    console.log(body.getBody())
    let result = {meta:{response_code:20000, response_desc:"Success",data:{a:1}}};
    res.send(result);
    return result;
 }));

app.get('/next', expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /next");
    }
    let result = {meta:{response_code:20000, response_desc:"Success",data:{a:1}}};
    res.send(result);
    next();
    return result;
}));

app.get('/error_test', expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /next");
    }
    let result = {meta:{response_code:20001, response_desc:"Test Fail",data:{a:1}}};
    res.send(result);
    next();
    return result;
}));

app.get('/next2', expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("route /next");
    }
    res.send("next2");
    next();
}));

app.get('/error', expressWarped((req, res, next) => {
    try{
        log = LogSingleton.getLog(res);
        if(log)
        {
            log.debug("route /error");
        }
        throw new Error("force error");
    }
    catch(e){
        log = LogSingleton.getLog(res);
        if(log)
        {
            log.debug("raise error");
        }
        next(e);
    }
}));

app.use(expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("after route");
    }
    next()
}));

app.use(expressWarped((req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("after route2");
    }
}));


// app.use((err, req, res, next) => {
//     console.log("after error", req.headers.xxxx)
//     req.headers.xxxx += "8";
//     res.status(500).send("error");
// });


app.use(expressErrorWarped((err, req, res, next) => {
    log = LogSingleton.getLog(res);
    if(log)
    {
        log.debug("next error");
    }
    res.status(500).send("error");
}));

LogSingleton.getLog().debug("xxxx");

app.listen(port, () => console.log(`Example app listening on port ${port}!`))